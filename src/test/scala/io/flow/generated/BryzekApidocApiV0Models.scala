/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.11.26
 * apidoc:0.11.36 http://www.apidoc.me/bryzek/apidoc-api/0.11.26/play_2_x_standalone_json
 */
package com.bryzek.apidoc.api.v0.models {

  /**
   * Represents a single diff in an application
   */
  sealed trait Diff

  /**
   * Identifies the specific type of item that was indexed by search
   */
  sealed trait ItemDetail

  /**
   * An application has a name and multiple versions of its API.
   */
  case class Application(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.apidoc.common.v0.models.Reference,
    name: String,
    key: String,
    visibility: com.bryzek.apidoc.api.v0.models.Visibility,
    description: _root_.scala.Option[String] = None,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class ApplicationForm(
    name: String,
    key: _root_.scala.Option[String] = None,
    description: _root_.scala.Option[String] = None,
    visibility: com.bryzek.apidoc.api.v0.models.Visibility
  )

  /**
   * Summary of an application sufficient for display and links
   */
  case class ApplicationSummary(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.apidoc.common.v0.models.Reference,
    key: String
  ) extends ItemDetail

  /**
   * Attributes are globally unique key which allow users to specify additional
   * content to pass in to the code generators.
   */
  case class Attribute(
    guid: _root_.java.util.UUID,
    name: String,
    description: _root_.scala.Option[String] = None,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class AttributeForm(
    name: String,
    description: _root_.scala.Option[String] = None
  )

  case class AttributeSummary(
    guid: _root_.java.util.UUID,
    name: String
  )

  /**
   * Attribute values can be set at different levels. Initially we support setting
   * organization wide attributes, but in the future plan to support setting
   * attribute values with each version of the application.
   */
  case class AttributeValue(
    guid: _root_.java.util.UUID,
    attribute: com.bryzek.apidoc.api.v0.models.AttributeSummary,
    value: String,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class AttributeValueForm(
    value: String
  )

  /**
   * Represents a single change from one version of a service to another
   */
  case class Change(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.apidoc.common.v0.models.Reference,
    application: com.bryzek.apidoc.common.v0.models.Reference,
    fromVersion: com.bryzek.apidoc.api.v0.models.ChangeVersion,
    toVersion: com.bryzek.apidoc.api.v0.models.ChangeVersion,
    diff: com.bryzek.apidoc.api.v0.models.Diff,
    changedAt: _root_.org.joda.time.DateTime,
    changedBy: com.bryzek.apidoc.api.v0.models.UserSummary,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  /**
   * Represents a simpler model of a version specifically for the use case of
   * displaying changes
   */
  case class ChangeVersion(
    guid: _root_.java.util.UUID,
    version: String
  )

  /**
   * Separate resource used only for the few actions that require the full token.
   */
  case class CleartextToken(
    token: String
  )

  /**
   * Generated source code.
   */
  case class Code(
    generator: com.bryzek.apidoc.api.v0.models.GeneratorWithService,
    source: String,
    files: Seq[com.bryzek.apidoc.generator.v0.models.File] = Nil
  )

  /**
   * Represents a single breaking diff of an application version. A breaking diff
   * indicates that it is possible for an existing client to now experience an error
   * or invalid data due to the diff.
   */
  case class DiffBreaking(
    description: String
  ) extends Diff

  /**
   * Represents a single NON breaking diff of an application version.
   */
  case class DiffNonBreaking(
    description: String
  ) extends Diff

  /**
   * Represents a single domain name (e.g. www.apidoc.me). When a new user registers
   * and confirms their email, we automatically associate that user with a member of
   * the organization associated with their domain. For example, if you confirm your
   * account with an email address of foo@bryzek.com, we will automatically create a
   * membership request on your behalf to join the organization with domain
   * bryzek.com.
   */
  case class Domain(
    name: String
  )

  /**
   * Data used to confirm an email address. The token is an internal unique
   * identifier used to lookup the specific email address and user account for which
   * we sent an email verification email.
   */
  case class EmailVerificationConfirmationForm(
    token: String
  )

  case class Error(
    code: String,
    message: String
  )

  case class GeneratorForm(
    serviceGuid: _root_.java.util.UUID,
    generator: com.bryzek.apidoc.generator.v0.models.Generator
  )

  /**
   * Defines a service that provides one or more code generators
   */
  case class GeneratorService(
    guid: _root_.java.util.UUID,
    uri: String,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class GeneratorServiceForm(
    uri: String
  )

  /**
   * Wraps a service and a generator providing easier access for applications.
   */
  case class GeneratorWithService(
    service: com.bryzek.apidoc.api.v0.models.GeneratorService,
    generator: com.bryzek.apidoc.generator.v0.models.Generator
  )

  /**
   * When searching for content, the results of the search will be a list of items.
   * Each item will have enough information to render for the user, including a type
   * and item_guid to enable creating the appropriate link.
   */
  case class Item(
    guid: _root_.java.util.UUID,
    detail: com.bryzek.apidoc.api.v0.models.ItemDetail,
    label: String,
    description: _root_.scala.Option[String] = None
  )

  /**
   * A membership represents a user in a specific role to an organization.
   * Memberships cannot be created directly. Instead you first create a membership
   * request, then that request is either accepted or declined.
   */
  case class Membership(
    guid: _root_.java.util.UUID,
    user: com.bryzek.apidoc.api.v0.models.User,
    organization: com.bryzek.apidoc.api.v0.models.Organization,
    role: String,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  /**
   * A membership request represents a user requesting to join an organization with a
   * specific role (e.g. as a member or an admin). Membership requests can be
   * reviewed by any current admin of the organization who can either accept or
   * decline the request.
   */
  case class MembershipRequest(
    guid: _root_.java.util.UUID,
    user: com.bryzek.apidoc.api.v0.models.User,
    organization: com.bryzek.apidoc.api.v0.models.Organization,
    role: String,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class MoveForm(
    orgKey: String
  )

  /**
   * An organization is used to group a set of applications together.
   */
  case class Organization(
    guid: _root_.java.util.UUID,
    key: String,
    name: String,
    namespace: String,
    visibility: com.bryzek.apidoc.api.v0.models.Visibility,
    domains: Seq[com.bryzek.apidoc.api.v0.models.Domain] = Nil,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class OrganizationForm(
    name: String,
    key: _root_.scala.Option[String] = None,
    namespace: String,
    visibility: com.bryzek.apidoc.api.v0.models.Visibility = com.bryzek.apidoc.api.v0.models.Visibility.Organization,
    domains: _root_.scala.Option[Seq[String]] = None
  )

  /**
   * Represents the original input used to create an application version
   */
  case class Original(
    `type`: com.bryzek.apidoc.api.v0.models.OriginalType,
    data: String
  )

  case class OriginalForm(
    `type`: _root_.scala.Option[com.bryzek.apidoc.api.v0.models.OriginalType] = None,
    data: String
  )

  /**
   * Allows a user to change their password with authentication from a token.
   */
  case class PasswordReset(
    token: String,
    password: String
  )

  /**
   * Create a password reset request - e.g. an email containing a one time URL to
   * change a password
   */
  case class PasswordResetRequest(
    email: String
  )

  /**
   * On a successful password reset, return some metadata about the user modified.
   */
  case class PasswordResetSuccess(
    userGuid: _root_.java.util.UUID
  )

  /**
   * Represents a user that is currently subscribed to a publication
   */
  case class Subscription(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.apidoc.api.v0.models.Organization,
    user: com.bryzek.apidoc.api.v0.models.User,
    publication: com.bryzek.apidoc.api.v0.models.Publication,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class SubscriptionForm(
    organizationKey: String,
    userGuid: _root_.java.util.UUID,
    publication: com.bryzek.apidoc.api.v0.models.Publication
  )

  /**
   * A token gives a user access to the API.
   */
  case class Token(
    guid: _root_.java.util.UUID,
    user: com.bryzek.apidoc.api.v0.models.User,
    maskedToken: String,
    description: _root_.scala.Option[String] = None,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class TokenForm(
    userGuid: _root_.java.util.UUID,
    description: _root_.scala.Option[String] = None
  )

  /**
   * A user is a top level person interacting with the api doc server.
   */
  case class User(
    guid: _root_.java.util.UUID,
    email: String,
    nickname: String,
    name: _root_.scala.Option[String] = None,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class UserForm(
    email: String,
    password: String,
    nickname: _root_.scala.Option[String] = None,
    name: _root_.scala.Option[String] = None
  )

  /**
   * Summary of a user sufficient for display
   */
  case class UserSummary(
    guid: _root_.java.util.UUID,
    nickname: String
  )

  case class UserUpdateForm(
    email: String,
    nickname: String,
    name: _root_.scala.Option[String] = None
  )

  /**
   * Used only to validate json files - used as a resource where http status code
   * defines success
   */
  case class Validation(
    valid: Boolean,
    errors: Seq[String] = Nil
  )

  /**
   * Represents a unique version of the application.
   */
  case class Version(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.apidoc.common.v0.models.Reference,
    application: com.bryzek.apidoc.common.v0.models.Reference,
    version: String,
    original: _root_.scala.Option[com.bryzek.apidoc.api.v0.models.Original] = None,
    service: com.bryzek.apidoc.spec.v0.models.Service,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class VersionForm(
    originalForm: com.bryzek.apidoc.api.v0.models.OriginalForm,
    visibility: _root_.scala.Option[com.bryzek.apidoc.api.v0.models.Visibility] = None
  )

  /**
   * Users can watch individual applications which enables features like receiving an
   * email notification when there is a new version of an application.
   */
  case class Watch(
    guid: _root_.java.util.UUID,
    user: com.bryzek.apidoc.api.v0.models.User,
    organization: com.bryzek.apidoc.api.v0.models.Organization,
    application: com.bryzek.apidoc.api.v0.models.Application,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class WatchForm(
    userGuid: _root_.java.util.UUID,
    organizationKey: String,
    applicationKey: String
  )

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union Diff, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class DiffUndefinedType(
    description: String
  ) extends Diff

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union ItemDetail, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class ItemDetailUndefinedType(
    description: String
  ) extends ItemDetail

  sealed trait OriginalType

  object OriginalType {

    /**
     * The original is in the api.json format
     */
    case object ApiJson extends OriginalType { override def toString = "api_json" }
    /**
     * The original is in Avro Idl format
     */
    case object AvroIdl extends OriginalType { override def toString = "avro_idl" }
    /**
     * This is the canonical service spec for apidoc itself. See
     * http://apidoc.me/bryzek/apidoc-spec/latest#model-service
     */
    case object ServiceJson extends OriginalType { override def toString = "service_json" }
    /**
     * The original in the swagger.json format
     */
    case object SwaggerJson extends OriginalType { override def toString = "swagger_json" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends OriginalType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(ApiJson, AvroIdl, ServiceJson, SwaggerJson)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): OriginalType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[OriginalType] = byName.get(value.toLowerCase)

  }

  /**
   * A publication represents something that a user can subscribe to. An example
   * would be subscribing to an email alert whenever a new version of an application
   * is created.
   */
  sealed trait Publication

  object Publication {

    /**
     * For organizations for which I am an administrator, email me whenever a user
     * applies to join the org.
     */
    case object MembershipRequestsCreate extends Publication { override def toString = "membership_requests.create" }
    /**
     * For organizations for which I am a member, email me whenever a user joins the
     * org.
     */
    case object MembershipsCreate extends Publication { override def toString = "memberships.create" }
    /**
     * For organizations for which I am a member, email me whenever an application is
     * created.
     */
    case object ApplicationsCreate extends Publication { override def toString = "applications.create" }
    /**
     * For applications that I watch, email me whenever a version is created.
     */
    case object VersionsCreate extends Publication { override def toString = "versions.create" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Publication

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(MembershipRequestsCreate, MembershipsCreate, ApplicationsCreate, VersionsCreate)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Publication = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Publication] = byName.get(value.toLowerCase)

  }

  /**
   * Controls who is able to view this version
   */
  sealed trait Visibility

  object Visibility {

    /**
     * Only the creator can view this application
     */
    case object User extends Visibility { override def toString = "user" }
    /**
     * Any member of the organization can view this application
     */
    case object Organization extends Visibility { override def toString = "organization" }
    /**
     * Anybody, including non logged in users, can view this application
     */
    case object Public extends Visibility { override def toString = "public" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Visibility

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(User, Organization, Public)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Visibility = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Visibility] = byName.get(value.toLowerCase)

  }

}

package com.bryzek.apidoc.api.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.bryzek.apidoc.api.v0.models.json._
    import com.bryzek.apidoc.common.v0.models.json._
    import com.bryzek.apidoc.generator.v0.models.json._
    import com.bryzek.apidoc.spec.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsApidocapiOriginalType = new play.api.libs.json.Reads[com.bryzek.apidoc.api.v0.models.OriginalType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.bryzek.apidoc.api.v0.models.OriginalType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.bryzek.apidoc.api.v0.models.OriginalType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.bryzek.apidoc.api.v0.models.OriginalType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesApidocapiOriginalType(obj: com.bryzek.apidoc.api.v0.models.OriginalType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectOriginalType(obj: com.bryzek.apidoc.api.v0.models.OriginalType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApidocapiOriginalType: play.api.libs.json.Writes[OriginalType] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.OriginalType] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.OriginalType) = {
          jsonWritesApidocapiOriginalType(obj)
        }
      }
    }

    implicit val jsonReadsApidocapiPublication = new play.api.libs.json.Reads[com.bryzek.apidoc.api.v0.models.Publication] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.bryzek.apidoc.api.v0.models.Publication] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.bryzek.apidoc.api.v0.models.Publication(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.bryzek.apidoc.api.v0.models.Publication(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesApidocapiPublication(obj: com.bryzek.apidoc.api.v0.models.Publication) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectPublication(obj: com.bryzek.apidoc.api.v0.models.Publication) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApidocapiPublication: play.api.libs.json.Writes[Publication] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Publication] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Publication) = {
          jsonWritesApidocapiPublication(obj)
        }
      }
    }

    implicit val jsonReadsApidocapiVisibility = new play.api.libs.json.Reads[com.bryzek.apidoc.api.v0.models.Visibility] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.bryzek.apidoc.api.v0.models.Visibility] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.bryzek.apidoc.api.v0.models.Visibility(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.bryzek.apidoc.api.v0.models.Visibility(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesApidocapiVisibility(obj: com.bryzek.apidoc.api.v0.models.Visibility) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectVisibility(obj: com.bryzek.apidoc.api.v0.models.Visibility) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApidocapiVisibility: play.api.libs.json.Writes[Visibility] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Visibility] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Visibility) = {
          jsonWritesApidocapiVisibility(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiApplication: play.api.libs.json.Reads[Application] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.apidoc.common.v0.models.Reference] and
        (__ \ "name").read[String] and
        (__ \ "key").read[String] and
        (__ \ "visibility").read[com.bryzek.apidoc.api.v0.models.Visibility] and
        (__ \ "description").readNullable[String] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(Application.apply _)
    }

    def jsObjectApplication(obj: com.bryzek.apidoc.api.v0.models.Application) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "organization" -> com.bryzek.apidoc.common.v0.models.json.jsObjectReference(obj.organization),
        "name" -> play.api.libs.json.JsString(obj.name),
        "key" -> play.api.libs.json.JsString(obj.key),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApidocapiApplication: play.api.libs.json.Writes[Application] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Application] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Application) = {
          jsObjectApplication(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiApplicationForm: play.api.libs.json.Reads[ApplicationForm] = {
      (
        (__ \ "name").read[String] and
        (__ \ "key").readNullable[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "visibility").read[com.bryzek.apidoc.api.v0.models.Visibility]
      )(ApplicationForm.apply _)
    }

    def jsObjectApplicationForm(obj: com.bryzek.apidoc.api.v0.models.ApplicationForm) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString)
      ) ++ (obj.key match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("key" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApidocapiApplicationForm: play.api.libs.json.Writes[ApplicationForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.ApplicationForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.ApplicationForm) = {
          jsObjectApplicationForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiApplicationSummary: play.api.libs.json.Reads[ApplicationSummary] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.apidoc.common.v0.models.Reference] and
        (__ \ "key").read[String]
      )(ApplicationSummary.apply _)
    }

    def jsObjectApplicationSummary(obj: com.bryzek.apidoc.api.v0.models.ApplicationSummary) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "organization" -> com.bryzek.apidoc.common.v0.models.json.jsObjectReference(obj.organization),
        "key" -> play.api.libs.json.JsString(obj.key)
      )
    }

    implicit def jsonReadsApidocapiAttribute: play.api.libs.json.Reads[Attribute] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "name").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(Attribute.apply _)
    }

    def jsObjectAttribute(obj: com.bryzek.apidoc.api.v0.models.Attribute) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "name" -> play.api.libs.json.JsString(obj.name),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApidocapiAttribute: play.api.libs.json.Writes[Attribute] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Attribute] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Attribute) = {
          jsObjectAttribute(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiAttributeForm: play.api.libs.json.Reads[AttributeForm] = {
      (
        (__ \ "name").read[String] and
        (__ \ "description").readNullable[String]
      )(AttributeForm.apply _)
    }

    def jsObjectAttributeForm(obj: com.bryzek.apidoc.api.v0.models.AttributeForm) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApidocapiAttributeForm: play.api.libs.json.Writes[AttributeForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.AttributeForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.AttributeForm) = {
          jsObjectAttributeForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiAttributeSummary: play.api.libs.json.Reads[AttributeSummary] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "name").read[String]
      )(AttributeSummary.apply _)
    }

    def jsObjectAttributeSummary(obj: com.bryzek.apidoc.api.v0.models.AttributeSummary) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesApidocapiAttributeSummary: play.api.libs.json.Writes[AttributeSummary] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.AttributeSummary] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.AttributeSummary) = {
          jsObjectAttributeSummary(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiAttributeValue: play.api.libs.json.Reads[AttributeValue] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "attribute").read[com.bryzek.apidoc.api.v0.models.AttributeSummary] and
        (__ \ "value").read[String] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(AttributeValue.apply _)
    }

    def jsObjectAttributeValue(obj: com.bryzek.apidoc.api.v0.models.AttributeValue) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "attribute" -> jsObjectAttributeSummary(obj.attribute),
        "value" -> play.api.libs.json.JsString(obj.value),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApidocapiAttributeValue: play.api.libs.json.Writes[AttributeValue] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.AttributeValue] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.AttributeValue) = {
          jsObjectAttributeValue(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiAttributeValueForm: play.api.libs.json.Reads[AttributeValueForm] = {
      (__ \ "value").read[String].map { x => new AttributeValueForm(value = x) }
    }

    def jsObjectAttributeValueForm(obj: com.bryzek.apidoc.api.v0.models.AttributeValueForm) = {
      play.api.libs.json.Json.obj(
        "value" -> play.api.libs.json.JsString(obj.value)
      )
    }

    implicit def jsonWritesApidocapiAttributeValueForm: play.api.libs.json.Writes[AttributeValueForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.AttributeValueForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.AttributeValueForm) = {
          jsObjectAttributeValueForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiChange: play.api.libs.json.Reads[Change] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.apidoc.common.v0.models.Reference] and
        (__ \ "application").read[com.bryzek.apidoc.common.v0.models.Reference] and
        (__ \ "from_version").read[com.bryzek.apidoc.api.v0.models.ChangeVersion] and
        (__ \ "to_version").read[com.bryzek.apidoc.api.v0.models.ChangeVersion] and
        (__ \ "diff").read[com.bryzek.apidoc.api.v0.models.Diff] and
        (__ \ "changed_at").read[_root_.org.joda.time.DateTime] and
        (__ \ "changed_by").read[com.bryzek.apidoc.api.v0.models.UserSummary] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(Change.apply _)
    }

    def jsObjectChange(obj: com.bryzek.apidoc.api.v0.models.Change) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "organization" -> com.bryzek.apidoc.common.v0.models.json.jsObjectReference(obj.organization),
        "application" -> com.bryzek.apidoc.common.v0.models.json.jsObjectReference(obj.application),
        "from_version" -> jsObjectChangeVersion(obj.fromVersion),
        "to_version" -> jsObjectChangeVersion(obj.toVersion),
        "diff" -> jsObjectDiff(obj.diff),
        "changed_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.changedAt)),
        "changed_by" -> jsObjectUserSummary(obj.changedBy),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApidocapiChange: play.api.libs.json.Writes[Change] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Change] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Change) = {
          jsObjectChange(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiChangeVersion: play.api.libs.json.Reads[ChangeVersion] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "version").read[String]
      )(ChangeVersion.apply _)
    }

    def jsObjectChangeVersion(obj: com.bryzek.apidoc.api.v0.models.ChangeVersion) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "version" -> play.api.libs.json.JsString(obj.version)
      )
    }

    implicit def jsonWritesApidocapiChangeVersion: play.api.libs.json.Writes[ChangeVersion] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.ChangeVersion] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.ChangeVersion) = {
          jsObjectChangeVersion(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiCleartextToken: play.api.libs.json.Reads[CleartextToken] = {
      (__ \ "token").read[String].map { x => new CleartextToken(token = x) }
    }

    def jsObjectCleartextToken(obj: com.bryzek.apidoc.api.v0.models.CleartextToken) = {
      play.api.libs.json.Json.obj(
        "token" -> play.api.libs.json.JsString(obj.token)
      )
    }

    implicit def jsonWritesApidocapiCleartextToken: play.api.libs.json.Writes[CleartextToken] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.CleartextToken] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.CleartextToken) = {
          jsObjectCleartextToken(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiCode: play.api.libs.json.Reads[Code] = {
      (
        (__ \ "generator").read[com.bryzek.apidoc.api.v0.models.GeneratorWithService] and
        (__ \ "source").read[String] and
        (__ \ "files").read[Seq[com.bryzek.apidoc.generator.v0.models.File]]
      )(Code.apply _)
    }

    def jsObjectCode(obj: com.bryzek.apidoc.api.v0.models.Code) = {
      play.api.libs.json.Json.obj(
        "generator" -> jsObjectGeneratorWithService(obj.generator),
        "source" -> play.api.libs.json.JsString(obj.source),
        "files" -> play.api.libs.json.Json.toJson(obj.files)
      )
    }

    implicit def jsonWritesApidocapiCode: play.api.libs.json.Writes[Code] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Code] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Code) = {
          jsObjectCode(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiDiffBreaking: play.api.libs.json.Reads[DiffBreaking] = {
      (__ \ "description").read[String].map { x => new DiffBreaking(description = x) }
    }

    def jsObjectDiffBreaking(obj: com.bryzek.apidoc.api.v0.models.DiffBreaking) = {
      play.api.libs.json.Json.obj(
        "description" -> play.api.libs.json.JsString(obj.description)
      )
    }

    implicit def jsonReadsApidocapiDiffNonBreaking: play.api.libs.json.Reads[DiffNonBreaking] = {
      (__ \ "description").read[String].map { x => new DiffNonBreaking(description = x) }
    }

    def jsObjectDiffNonBreaking(obj: com.bryzek.apidoc.api.v0.models.DiffNonBreaking) = {
      play.api.libs.json.Json.obj(
        "description" -> play.api.libs.json.JsString(obj.description)
      )
    }

    implicit def jsonReadsApidocapiDomain: play.api.libs.json.Reads[Domain] = {
      (__ \ "name").read[String].map { x => new Domain(name = x) }
    }

    def jsObjectDomain(obj: com.bryzek.apidoc.api.v0.models.Domain) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesApidocapiDomain: play.api.libs.json.Writes[Domain] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Domain] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Domain) = {
          jsObjectDomain(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiEmailVerificationConfirmationForm: play.api.libs.json.Reads[EmailVerificationConfirmationForm] = {
      (__ \ "token").read[String].map { x => new EmailVerificationConfirmationForm(token = x) }
    }

    def jsObjectEmailVerificationConfirmationForm(obj: com.bryzek.apidoc.api.v0.models.EmailVerificationConfirmationForm) = {
      play.api.libs.json.Json.obj(
        "token" -> play.api.libs.json.JsString(obj.token)
      )
    }

    implicit def jsonWritesApidocapiEmailVerificationConfirmationForm: play.api.libs.json.Writes[EmailVerificationConfirmationForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.EmailVerificationConfirmationForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.EmailVerificationConfirmationForm) = {
          jsObjectEmailVerificationConfirmationForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiError: play.api.libs.json.Reads[Error] = {
      (
        (__ \ "code").read[String] and
        (__ \ "message").read[String]
      )(Error.apply _)
    }

    def jsObjectError(obj: com.bryzek.apidoc.api.v0.models.Error) = {
      play.api.libs.json.Json.obj(
        "code" -> play.api.libs.json.JsString(obj.code),
        "message" -> play.api.libs.json.JsString(obj.message)
      )
    }

    implicit def jsonWritesApidocapiError: play.api.libs.json.Writes[Error] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Error] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Error) = {
          jsObjectError(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiGeneratorForm: play.api.libs.json.Reads[GeneratorForm] = {
      (
        (__ \ "service_guid").read[_root_.java.util.UUID] and
        (__ \ "generator").read[com.bryzek.apidoc.generator.v0.models.Generator]
      )(GeneratorForm.apply _)
    }

    def jsObjectGeneratorForm(obj: com.bryzek.apidoc.api.v0.models.GeneratorForm) = {
      play.api.libs.json.Json.obj(
        "service_guid" -> play.api.libs.json.JsString(obj.serviceGuid.toString),
        "generator" -> com.bryzek.apidoc.generator.v0.models.json.jsObjectGenerator(obj.generator)
      )
    }

    implicit def jsonWritesApidocapiGeneratorForm: play.api.libs.json.Writes[GeneratorForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.GeneratorForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.GeneratorForm) = {
          jsObjectGeneratorForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiGeneratorService: play.api.libs.json.Reads[GeneratorService] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "uri").read[String] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(GeneratorService.apply _)
    }

    def jsObjectGeneratorService(obj: com.bryzek.apidoc.api.v0.models.GeneratorService) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "uri" -> play.api.libs.json.JsString(obj.uri),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApidocapiGeneratorService: play.api.libs.json.Writes[GeneratorService] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.GeneratorService] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.GeneratorService) = {
          jsObjectGeneratorService(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiGeneratorServiceForm: play.api.libs.json.Reads[GeneratorServiceForm] = {
      (__ \ "uri").read[String].map { x => new GeneratorServiceForm(uri = x) }
    }

    def jsObjectGeneratorServiceForm(obj: com.bryzek.apidoc.api.v0.models.GeneratorServiceForm) = {
      play.api.libs.json.Json.obj(
        "uri" -> play.api.libs.json.JsString(obj.uri)
      )
    }

    implicit def jsonWritesApidocapiGeneratorServiceForm: play.api.libs.json.Writes[GeneratorServiceForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.GeneratorServiceForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.GeneratorServiceForm) = {
          jsObjectGeneratorServiceForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiGeneratorWithService: play.api.libs.json.Reads[GeneratorWithService] = {
      (
        (__ \ "service").read[com.bryzek.apidoc.api.v0.models.GeneratorService] and
        (__ \ "generator").read[com.bryzek.apidoc.generator.v0.models.Generator]
      )(GeneratorWithService.apply _)
    }

    def jsObjectGeneratorWithService(obj: com.bryzek.apidoc.api.v0.models.GeneratorWithService) = {
      play.api.libs.json.Json.obj(
        "service" -> jsObjectGeneratorService(obj.service),
        "generator" -> com.bryzek.apidoc.generator.v0.models.json.jsObjectGenerator(obj.generator)
      )
    }

    implicit def jsonWritesApidocapiGeneratorWithService: play.api.libs.json.Writes[GeneratorWithService] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.GeneratorWithService] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.GeneratorWithService) = {
          jsObjectGeneratorWithService(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiItem: play.api.libs.json.Reads[Item] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "detail").read[com.bryzek.apidoc.api.v0.models.ItemDetail] and
        (__ \ "label").read[String] and
        (__ \ "description").readNullable[String]
      )(Item.apply _)
    }

    def jsObjectItem(obj: com.bryzek.apidoc.api.v0.models.Item) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "detail" -> jsObjectItemDetail(obj.detail),
        "label" -> play.api.libs.json.JsString(obj.label)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApidocapiItem: play.api.libs.json.Writes[Item] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Item] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Item) = {
          jsObjectItem(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiMembership: play.api.libs.json.Reads[Membership] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "user").read[com.bryzek.apidoc.api.v0.models.User] and
        (__ \ "organization").read[com.bryzek.apidoc.api.v0.models.Organization] and
        (__ \ "role").read[String] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(Membership.apply _)
    }

    def jsObjectMembership(obj: com.bryzek.apidoc.api.v0.models.Membership) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "user" -> jsObjectUser(obj.user),
        "organization" -> jsObjectOrganization(obj.organization),
        "role" -> play.api.libs.json.JsString(obj.role),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApidocapiMembership: play.api.libs.json.Writes[Membership] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Membership] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Membership) = {
          jsObjectMembership(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiMembershipRequest: play.api.libs.json.Reads[MembershipRequest] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "user").read[com.bryzek.apidoc.api.v0.models.User] and
        (__ \ "organization").read[com.bryzek.apidoc.api.v0.models.Organization] and
        (__ \ "role").read[String] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(MembershipRequest.apply _)
    }

    def jsObjectMembershipRequest(obj: com.bryzek.apidoc.api.v0.models.MembershipRequest) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "user" -> jsObjectUser(obj.user),
        "organization" -> jsObjectOrganization(obj.organization),
        "role" -> play.api.libs.json.JsString(obj.role),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApidocapiMembershipRequest: play.api.libs.json.Writes[MembershipRequest] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.MembershipRequest] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.MembershipRequest) = {
          jsObjectMembershipRequest(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiMoveForm: play.api.libs.json.Reads[MoveForm] = {
      (__ \ "org_key").read[String].map { x => new MoveForm(orgKey = x) }
    }

    def jsObjectMoveForm(obj: com.bryzek.apidoc.api.v0.models.MoveForm) = {
      play.api.libs.json.Json.obj(
        "org_key" -> play.api.libs.json.JsString(obj.orgKey)
      )
    }

    implicit def jsonWritesApidocapiMoveForm: play.api.libs.json.Writes[MoveForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.MoveForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.MoveForm) = {
          jsObjectMoveForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiOrganization: play.api.libs.json.Reads[Organization] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "key").read[String] and
        (__ \ "name").read[String] and
        (__ \ "namespace").read[String] and
        (__ \ "visibility").read[com.bryzek.apidoc.api.v0.models.Visibility] and
        (__ \ "domains").read[Seq[com.bryzek.apidoc.api.v0.models.Domain]] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(Organization.apply _)
    }

    def jsObjectOrganization(obj: com.bryzek.apidoc.api.v0.models.Organization) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "key" -> play.api.libs.json.JsString(obj.key),
        "name" -> play.api.libs.json.JsString(obj.name),
        "namespace" -> play.api.libs.json.JsString(obj.namespace),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "domains" -> play.api.libs.json.Json.toJson(obj.domains),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApidocapiOrganization: play.api.libs.json.Writes[Organization] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Organization] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Organization) = {
          jsObjectOrganization(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiOrganizationForm: play.api.libs.json.Reads[OrganizationForm] = {
      (
        (__ \ "name").read[String] and
        (__ \ "key").readNullable[String] and
        (__ \ "namespace").read[String] and
        (__ \ "visibility").read[com.bryzek.apidoc.api.v0.models.Visibility] and
        (__ \ "domains").readNullable[Seq[String]]
      )(OrganizationForm.apply _)
    }

    def jsObjectOrganizationForm(obj: com.bryzek.apidoc.api.v0.models.OrganizationForm) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "namespace" -> play.api.libs.json.JsString(obj.namespace),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString)
      ) ++ (obj.key match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("key" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.domains match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("domains" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesApidocapiOrganizationForm: play.api.libs.json.Writes[OrganizationForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.OrganizationForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.OrganizationForm) = {
          jsObjectOrganizationForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiOriginal: play.api.libs.json.Reads[Original] = {
      (
        (__ \ "type").read[com.bryzek.apidoc.api.v0.models.OriginalType] and
        (__ \ "data").read[String]
      )(Original.apply _)
    }

    def jsObjectOriginal(obj: com.bryzek.apidoc.api.v0.models.Original) = {
      play.api.libs.json.Json.obj(
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "data" -> play.api.libs.json.JsString(obj.data)
      )
    }

    implicit def jsonWritesApidocapiOriginal: play.api.libs.json.Writes[Original] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Original] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Original) = {
          jsObjectOriginal(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiOriginalForm: play.api.libs.json.Reads[OriginalForm] = {
      (
        (__ \ "type").readNullable[com.bryzek.apidoc.api.v0.models.OriginalType] and
        (__ \ "data").read[String]
      )(OriginalForm.apply _)
    }

    def jsObjectOriginalForm(obj: com.bryzek.apidoc.api.v0.models.OriginalForm) = {
      play.api.libs.json.Json.obj(
        "data" -> play.api.libs.json.JsString(obj.data)
      ) ++ (obj.`type` match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("type" -> play.api.libs.json.JsString(x.toString))
      })
    }

    implicit def jsonWritesApidocapiOriginalForm: play.api.libs.json.Writes[OriginalForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.OriginalForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.OriginalForm) = {
          jsObjectOriginalForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiPasswordReset: play.api.libs.json.Reads[PasswordReset] = {
      (
        (__ \ "token").read[String] and
        (__ \ "password").read[String]
      )(PasswordReset.apply _)
    }

    def jsObjectPasswordReset(obj: com.bryzek.apidoc.api.v0.models.PasswordReset) = {
      play.api.libs.json.Json.obj(
        "token" -> play.api.libs.json.JsString(obj.token),
        "password" -> play.api.libs.json.JsString(obj.password)
      )
    }

    implicit def jsonWritesApidocapiPasswordReset: play.api.libs.json.Writes[PasswordReset] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.PasswordReset] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.PasswordReset) = {
          jsObjectPasswordReset(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiPasswordResetRequest: play.api.libs.json.Reads[PasswordResetRequest] = {
      (__ \ "email").read[String].map { x => new PasswordResetRequest(email = x) }
    }

    def jsObjectPasswordResetRequest(obj: com.bryzek.apidoc.api.v0.models.PasswordResetRequest) = {
      play.api.libs.json.Json.obj(
        "email" -> play.api.libs.json.JsString(obj.email)
      )
    }

    implicit def jsonWritesApidocapiPasswordResetRequest: play.api.libs.json.Writes[PasswordResetRequest] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.PasswordResetRequest] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.PasswordResetRequest) = {
          jsObjectPasswordResetRequest(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiPasswordResetSuccess: play.api.libs.json.Reads[PasswordResetSuccess] = {
      (__ \ "user_guid").read[_root_.java.util.UUID].map { x => new PasswordResetSuccess(userGuid = x) }
    }

    def jsObjectPasswordResetSuccess(obj: com.bryzek.apidoc.api.v0.models.PasswordResetSuccess) = {
      play.api.libs.json.Json.obj(
        "user_guid" -> play.api.libs.json.JsString(obj.userGuid.toString)
      )
    }

    implicit def jsonWritesApidocapiPasswordResetSuccess: play.api.libs.json.Writes[PasswordResetSuccess] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.PasswordResetSuccess] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.PasswordResetSuccess) = {
          jsObjectPasswordResetSuccess(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiSubscription: play.api.libs.json.Reads[Subscription] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.apidoc.api.v0.models.Organization] and
        (__ \ "user").read[com.bryzek.apidoc.api.v0.models.User] and
        (__ \ "publication").read[com.bryzek.apidoc.api.v0.models.Publication] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(Subscription.apply _)
    }

    def jsObjectSubscription(obj: com.bryzek.apidoc.api.v0.models.Subscription) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "organization" -> jsObjectOrganization(obj.organization),
        "user" -> jsObjectUser(obj.user),
        "publication" -> play.api.libs.json.JsString(obj.publication.toString),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApidocapiSubscription: play.api.libs.json.Writes[Subscription] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Subscription] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Subscription) = {
          jsObjectSubscription(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiSubscriptionForm: play.api.libs.json.Reads[SubscriptionForm] = {
      (
        (__ \ "organization_key").read[String] and
        (__ \ "user_guid").read[_root_.java.util.UUID] and
        (__ \ "publication").read[com.bryzek.apidoc.api.v0.models.Publication]
      )(SubscriptionForm.apply _)
    }

    def jsObjectSubscriptionForm(obj: com.bryzek.apidoc.api.v0.models.SubscriptionForm) = {
      play.api.libs.json.Json.obj(
        "organization_key" -> play.api.libs.json.JsString(obj.organizationKey),
        "user_guid" -> play.api.libs.json.JsString(obj.userGuid.toString),
        "publication" -> play.api.libs.json.JsString(obj.publication.toString)
      )
    }

    implicit def jsonWritesApidocapiSubscriptionForm: play.api.libs.json.Writes[SubscriptionForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.SubscriptionForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.SubscriptionForm) = {
          jsObjectSubscriptionForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiToken: play.api.libs.json.Reads[Token] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "user").read[com.bryzek.apidoc.api.v0.models.User] and
        (__ \ "masked_token").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(Token.apply _)
    }

    def jsObjectToken(obj: com.bryzek.apidoc.api.v0.models.Token) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "user" -> jsObjectUser(obj.user),
        "masked_token" -> play.api.libs.json.JsString(obj.maskedToken),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApidocapiToken: play.api.libs.json.Writes[Token] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Token] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Token) = {
          jsObjectToken(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiTokenForm: play.api.libs.json.Reads[TokenForm] = {
      (
        (__ \ "user_guid").read[_root_.java.util.UUID] and
        (__ \ "description").readNullable[String]
      )(TokenForm.apply _)
    }

    def jsObjectTokenForm(obj: com.bryzek.apidoc.api.v0.models.TokenForm) = {
      play.api.libs.json.Json.obj(
        "user_guid" -> play.api.libs.json.JsString(obj.userGuid.toString)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApidocapiTokenForm: play.api.libs.json.Writes[TokenForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.TokenForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.TokenForm) = {
          jsObjectTokenForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiUser: play.api.libs.json.Reads[User] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "email").read[String] and
        (__ \ "nickname").read[String] and
        (__ \ "name").readNullable[String] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(User.apply _)
    }

    def jsObjectUser(obj: com.bryzek.apidoc.api.v0.models.User) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "email" -> play.api.libs.json.JsString(obj.email),
        "nickname" -> play.api.libs.json.JsString(obj.nickname),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      ) ++ (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApidocapiUser: play.api.libs.json.Writes[User] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.User] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.User) = {
          jsObjectUser(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiUserForm: play.api.libs.json.Reads[UserForm] = {
      (
        (__ \ "email").read[String] and
        (__ \ "password").read[String] and
        (__ \ "nickname").readNullable[String] and
        (__ \ "name").readNullable[String]
      )(UserForm.apply _)
    }

    def jsObjectUserForm(obj: com.bryzek.apidoc.api.v0.models.UserForm) = {
      play.api.libs.json.Json.obj(
        "email" -> play.api.libs.json.JsString(obj.email),
        "password" -> play.api.libs.json.JsString(obj.password)
      ) ++ (obj.nickname match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("nickname" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApidocapiUserForm: play.api.libs.json.Writes[UserForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.UserForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.UserForm) = {
          jsObjectUserForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiUserSummary: play.api.libs.json.Reads[UserSummary] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "nickname").read[String]
      )(UserSummary.apply _)
    }

    def jsObjectUserSummary(obj: com.bryzek.apidoc.api.v0.models.UserSummary) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "nickname" -> play.api.libs.json.JsString(obj.nickname)
      )
    }

    implicit def jsonWritesApidocapiUserSummary: play.api.libs.json.Writes[UserSummary] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.UserSummary] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.UserSummary) = {
          jsObjectUserSummary(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiUserUpdateForm: play.api.libs.json.Reads[UserUpdateForm] = {
      (
        (__ \ "email").read[String] and
        (__ \ "nickname").read[String] and
        (__ \ "name").readNullable[String]
      )(UserUpdateForm.apply _)
    }

    def jsObjectUserUpdateForm(obj: com.bryzek.apidoc.api.v0.models.UserUpdateForm) = {
      play.api.libs.json.Json.obj(
        "email" -> play.api.libs.json.JsString(obj.email),
        "nickname" -> play.api.libs.json.JsString(obj.nickname)
      ) ++ (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApidocapiUserUpdateForm: play.api.libs.json.Writes[UserUpdateForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.UserUpdateForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.UserUpdateForm) = {
          jsObjectUserUpdateForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiValidation: play.api.libs.json.Reads[Validation] = {
      (
        (__ \ "valid").read[Boolean] and
        (__ \ "errors").read[Seq[String]]
      )(Validation.apply _)
    }

    def jsObjectValidation(obj: com.bryzek.apidoc.api.v0.models.Validation) = {
      play.api.libs.json.Json.obj(
        "valid" -> play.api.libs.json.JsBoolean(obj.valid),
        "errors" -> play.api.libs.json.Json.toJson(obj.errors)
      )
    }

    implicit def jsonWritesApidocapiValidation: play.api.libs.json.Writes[Validation] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Validation] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Validation) = {
          jsObjectValidation(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiVersion: play.api.libs.json.Reads[Version] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.apidoc.common.v0.models.Reference] and
        (__ \ "application").read[com.bryzek.apidoc.common.v0.models.Reference] and
        (__ \ "version").read[String] and
        (__ \ "original").readNullable[com.bryzek.apidoc.api.v0.models.Original] and
        (__ \ "service").read[com.bryzek.apidoc.spec.v0.models.Service] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(Version.apply _)
    }

    def jsObjectVersion(obj: com.bryzek.apidoc.api.v0.models.Version) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "organization" -> com.bryzek.apidoc.common.v0.models.json.jsObjectReference(obj.organization),
        "application" -> com.bryzek.apidoc.common.v0.models.json.jsObjectReference(obj.application),
        "version" -> play.api.libs.json.JsString(obj.version),
        "service" -> com.bryzek.apidoc.spec.v0.models.json.jsObjectService(obj.service),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      ) ++ (obj.original match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("original" -> jsObjectOriginal(x))
      })
    }

    implicit def jsonWritesApidocapiVersion: play.api.libs.json.Writes[Version] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Version] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Version) = {
          jsObjectVersion(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiVersionForm: play.api.libs.json.Reads[VersionForm] = {
      (
        (__ \ "original_form").read[com.bryzek.apidoc.api.v0.models.OriginalForm] and
        (__ \ "visibility").readNullable[com.bryzek.apidoc.api.v0.models.Visibility]
      )(VersionForm.apply _)
    }

    def jsObjectVersionForm(obj: com.bryzek.apidoc.api.v0.models.VersionForm) = {
      play.api.libs.json.Json.obj(
        "original_form" -> jsObjectOriginalForm(obj.originalForm)
      ) ++ (obj.visibility match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("visibility" -> play.api.libs.json.JsString(x.toString))
      })
    }

    implicit def jsonWritesApidocapiVersionForm: play.api.libs.json.Writes[VersionForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.VersionForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.VersionForm) = {
          jsObjectVersionForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiWatch: play.api.libs.json.Reads[Watch] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "user").read[com.bryzek.apidoc.api.v0.models.User] and
        (__ \ "organization").read[com.bryzek.apidoc.api.v0.models.Organization] and
        (__ \ "application").read[com.bryzek.apidoc.api.v0.models.Application] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(Watch.apply _)
    }

    def jsObjectWatch(obj: com.bryzek.apidoc.api.v0.models.Watch) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "user" -> jsObjectUser(obj.user),
        "organization" -> jsObjectOrganization(obj.organization),
        "application" -> jsObjectApplication(obj.application),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApidocapiWatch: play.api.libs.json.Writes[Watch] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Watch] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Watch) = {
          jsObjectWatch(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiWatchForm: play.api.libs.json.Reads[WatchForm] = {
      (
        (__ \ "user_guid").read[_root_.java.util.UUID] and
        (__ \ "organization_key").read[String] and
        (__ \ "application_key").read[String]
      )(WatchForm.apply _)
    }

    def jsObjectWatchForm(obj: com.bryzek.apidoc.api.v0.models.WatchForm) = {
      play.api.libs.json.Json.obj(
        "user_guid" -> play.api.libs.json.JsString(obj.userGuid.toString),
        "organization_key" -> play.api.libs.json.JsString(obj.organizationKey),
        "application_key" -> play.api.libs.json.JsString(obj.applicationKey)
      )
    }

    implicit def jsonWritesApidocapiWatchForm: play.api.libs.json.Writes[WatchForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.WatchForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.WatchForm) = {
          jsObjectWatchForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiDiff: play.api.libs.json.Reads[Diff] = new play.api.libs.json.Reads[Diff] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[Diff] = {
        (js \ "type").validate[String] match {
          case play.api.libs.json.JsError(msg) => play.api.libs.json.JsError(msg)
          case play.api.libs.json.JsSuccess(discriminator, _) => {
            discriminator match {
              case "diff_breaking" => js.validate[com.bryzek.apidoc.api.v0.models.DiffBreaking]
              case "diff_non_breaking" => js.validate[com.bryzek.apidoc.api.v0.models.DiffNonBreaking]
              case other => play.api.libs.json.JsSuccess(com.bryzek.apidoc.api.v0.models.DiffUndefinedType(other))
            }
          }
        }
      }
    }

    def jsObjectDiff(obj: com.bryzek.apidoc.api.v0.models.Diff) = {
      obj match {
        case x: com.bryzek.apidoc.api.v0.models.DiffBreaking => jsObjectDiffBreaking(x) ++ play.api.libs.json.Json.obj("type" -> "diff_breaking")
        case x: com.bryzek.apidoc.api.v0.models.DiffNonBreaking => jsObjectDiffNonBreaking(x) ++ play.api.libs.json.Json.obj("type" -> "diff_non_breaking")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesApidocapiDiff: play.api.libs.json.Writes[Diff] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Diff] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Diff) = {
          jsObjectDiff(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiItemDetail: play.api.libs.json.Reads[ItemDetail] = new play.api.libs.json.Reads[ItemDetail] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[ItemDetail] = {
        (js \ "type").validate[String] match {
          case play.api.libs.json.JsError(msg) => play.api.libs.json.JsError(msg)
          case play.api.libs.json.JsSuccess(discriminator, _) => {
            discriminator match {
              case "application_summary" => js.validate[com.bryzek.apidoc.api.v0.models.ApplicationSummary]
              case other => play.api.libs.json.JsSuccess(com.bryzek.apidoc.api.v0.models.ItemDetailUndefinedType(other))
            }
          }
        }
      }
    }

    def jsObjectItemDetail(obj: com.bryzek.apidoc.api.v0.models.ItemDetail) = {
      obj match {
        case x: com.bryzek.apidoc.api.v0.models.ApplicationSummary => jsObjectApplicationSummary(x) ++ play.api.libs.json.Json.obj("type" -> "application_summary")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesApidocapiItemDetail: play.api.libs.json.Writes[ItemDetail] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.ItemDetail] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.ItemDetail) = {
          jsObjectItemDetail(obj)
        }
      }
    }
  }
}

